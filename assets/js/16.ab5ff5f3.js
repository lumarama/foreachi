(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{371:function(t,a,s){"use strict";s.r(a);var e=s(42),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-cli-cheatsheet"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-cli-cheatsheet"}},[t._v("#")]),t._v(" Git CLI Cheatsheet")]),t._v(" "),s("h2",{attrs:{id:"repository-management"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repository-management"}},[t._v("#")]),t._v(" Repository Management")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Clone remote repository")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("repo-url"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"branch-management"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branch-management"}},[t._v("#")]),t._v(" Branch Management")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Create a new branch to track changes in the remote branch and switch to it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("local-branch-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" origin/"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("remote-branch-name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# List all local and remote branches")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch -a\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fetch remote branches")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" fetch\n")])])]),s("h2",{attrs:{id:"commit-management"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-management"}},[t._v("#")]),t._v(" Commit Management")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Show current branch status, shows modified files (staged and not staged)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commit all changes to the local branch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -am "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<commit-message>"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Push local branch to remote repo")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fetch and merge remote branch changes into your local branch")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Discard local not commited changes")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -- "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Fetch and rebase your local branch commits on top of the remote branch commits")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# if rebase failed with conflicts - resolve conflicts, stage changes and continue rebase")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" --all\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# you can also abort failed rebase")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --abort\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);